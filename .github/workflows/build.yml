name: Build
on: [push, pull_request]
env:
  CODE_PATH: .
  BUILD_PATH: build
  SDL3_VERSION: 3.2.8
defaults:
  run:
    shell: bash
jobs:
  build:
    name: Build ${{matrix.build-targets.name}}
    runs-on: ${{matrix.build-targets.os}}
    strategy:
      matrix:
        build-targets:
          - {
            name: "Linux (x64 Static)",
            os: "ubuntu-latest",
            libPath: "lib",
            cFlags: "",
            shared: false,
            compiler: "gcc",
            output: "AuriText-linux-x64-static"
          } 
          - {
            name: "Linux (x64 Shared)",
            os: "ubuntu-latest",
            libPath: "lib",
            cFlags: "",
            shared: true,
            compiler: "gcc",
            output: "AuriText-linux-x64-shared"
          } 
          - {
            name: "Windows (x64)",
            os: "windows-latest",
            libPath: "lib",
            cFlags: "",
            shared: true,
            compiler: "gcc",
            output: "AuriText-mingw-x64"
          }
    steps:
      - uses: actions/checkout@v4
      
      - name: SDL3 - Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: >
          sudo apt install build-essential git make
          pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev
          libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev
          libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev
          libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev
          libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev
          libwayland-dev libdecor-0-dev liburing-dev
      
      - name: SDL3 - Clone (Linux)
        if: runner.os == 'Linux'
        run: git clone https://github.com/libsdl-org/SDL.git
      
      - name: SDL3 - Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: >
          cmake -S SDL
          -B build/SDL
          -DCMAKE_C_COMPILER=${{matrix.build-targets.compiler}}
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=ON
          -DCMAKE_C_FLAGS=${{matrix.build-targets.cFlags}}
          -G "Unix Makefiles"
      
      - name: SDL3 - Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build/SDL
      
      - name: SDL3 - Install (Linux)
        if: runner.os == 'Linux'
        run: sudo cmake --install build/SDL
      
      - name: SDL3 - Install (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -L https://github.com/libsdl-org/SDL/releases/download/release-${{env.SDL3_VERSION}}/SDL3-devel-${{env.SDL3_VERSION}}-mingw.tar.gz -o SDL3-devel-${{env.SDL3_VERSION}}-mingw.tar.gz
          tar xzvf SDL3-devel-${{env.SDL3_VERSION}}-mingw.tar.gz
          
          cp -r SDL3-${{env.SDL3_VERSION}}/x86_64-w64-mingw32/* C:/mingw64
          cp -r SDL3-${{env.SDL3_VERSION}}/x86_64-w64-mingw32/* C:/mingw64/x86_64-w64-mingw32
      
      - name: Make Directories
        run: >
          mkdir -p "${{matrix.build-targets.output}}/include/AuriText"
          "${{matrix.build-targets.output}}/${{matrix.build-targets.libPath}}"
          "${{matrix.build-targets.output}}/share/licenses/AuriText"
      
      - name: Make Directories (Windows)
        if: runner.os == 'Windows'
        run: >
          mkdir -p "${{matrix.build-targets.output}}/bin"
      
      - name: Configure CMake
        run: >
          cmake -S ${{env.CODE_PATH}}
          -B ${{env.BUILD_PATH}}
          -DCMAKE_C_COMPILER=${{matrix.build-targets.compiler}}
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_SHARED_LIBS=${{matrix.build-targets.shared}}
          -DCMAKE_C_FLAGS=${{matrix.build-targets.cFlags}}
          -G "Unix Makefiles"
      
      - name: Build
        run: cmake --build ${{env.BUILD_PATH}}
     
      - name: Copy Files (Shared)
        run: |
          cp *.h "${{matrix.build-targets.output}}/include/AuriText"
          cp COPYING* "${{matrix.build-targets.output}}/share/licenses/AuriText"
      
      - name: Copy Files (Linux)
        if: runner.os == 'Linux'
        run: cp ${{env.BUILD_PATH}}/libAuriText.* "${{matrix.build-targets.output}}/${{matrix.build-targets.libPath}}"
      
      - name: Copy Files (Windows)
        if: runner.os == 'Windows'
        run: |
          cp ${{env.BUILD_PATH}}/libAuriText.dll.a "${{matrix.build-targets.output}}/${{matrix.build-targets.libPath}}"
          cp ${{env.BUILD_PATH}}/libAuriText.dll "${{matrix.build-targets.output}}/bin"
      
      - name: Make Archive
        run: tar -czvf "${{matrix.build-targets.output}}.tar.gz" "${{matrix.build-targets.output}}"
      
      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.build-targets.output}}
          path: ${{matrix.build-targets.output}}.tar.gz